Отчет по программированию

Введение

Данный отчет описывает практический опыт разработки программного обеспечения, полученный в ходе выполнения тестовых заданий от компании EPAM и самостоятельной работы. В ходе работы были освоены ключевые технологии программирования, такие как работа с системами контроля версий Git и Git Hub, модульное тестирование и разработка графического интерфейса пользователя (GUI) с использованием Qt Framework.

24.06.2024

Консультация по учебной практике. Ознакомление с программой учебной практики, заполнение дневников.

Целью учебной вычислительной (ознакомительной) практики является закрепление полученных знаний за первый год обучения посредством выполнения специальных учебных заданий, участия в работе над командным проектом. 
Задачи практики: 
1.Знакомство с IT кампанией, возможностями обучения и повышения квалификации, знакомство с разными направлениями профессиональной подготовки IT специалистов. 
2.Изучение инструментов для совместной разработки проектов и контроля версий. 
3.Подготовка и настройка программных сред и средств тестирования для прохождения тренинга по выбранному направлению. 
4.Выполнение стандартных заданий. 
5.Выполнение заданий повышенного уровня. 
6.Разработка приложения. 
7.Оформление отчета. 

Конференция с кампанией Soft Club. 


25.06.2024

1. Прохождение теста от EPAM по Git и GitHub

Тестовое задание от EPAM по Git и GitHub включало в себя задачи, направленные на проверку понимания основ работы с системами контроля версий. Были выполнены следующие действия:

• Инициализация репозитория: Создание нового репозитория на GitHub и подключение к нему локально.
• Создание веток: Разработка нового функционала в отдельной ветке и слияние изменений в основную ветку.
• Решение конфликтов: Исправление возникающих конфликтов при слиянии веток.


Успешное выполнение тестового задания позволило продемонстрировать знание принципов работы с Git и GitHub.
Результаты выполнения теста прикреплены на edu fpmi.
26.04.2024
2. Модульное тестирование (Unit Testing)

В ходе разработки программного обеспечения было применено модульное тестирование (unit testing) с использованием фреймворка Google Test. Тесты были написаны для отдельных функций и классов, позволяя гарантировать их корректную работу.

Преимущества модульного тестирования:

• Раннее обнаружение ошибок: Тесты запускаются часто, что позволяет выявлять ошибки на ранних этапах разработки.
• Повышение качества кода: Наличие тестов стимулирует разработчиков писать более качественный и модульный код.
• Упрощение рефакторинга: Тесты служат защитой от нежелательных изменений в коде, которые могут привести к ошибкам.

В ходе занятия было применено модульное тестирование к различным типам программ с использованием Visual Studio и QT Creator.

3. Создание GUI приложения в Qt

Для создания графического интерфейса пользователя (GUI) было выбрано кроссплатформенное фреймворк Qt. Qt Framework предоставляет богатый набор инструментов для разработки современных и интуитивно понятных интерфейсов.

Основные этапы разработки GUI приложения в Qt:

• Проектирование интерфейса: Создание макета приложения с использованием Qt Designer, определение элементов интерфейса и их связей.
• Разработка логики: Написание кода для обработки событий, взаимодействия с пользователем и реализации функциональности приложения.
• Тестирование: Проверка работы интерфейса и всех его компонентов.

Результаты

В результате работы была разработана функциональная программа, включающая в себя GUI с интуитивно понятным интерфейсом, модульные тесты для проверки функциональности кода, а также эффективная система контроля версий. 

Выводы

Полученный опыт работы с Git, GitHub, модульным тестированием и Qt Framework позволил значительно расширить знания в области разработки программного обеспечения. Понимание этих технологий является ключевым для успешного решения задач, возникающих при разработке сложных программных систем.


